import React from 'react';
import { ChatMessage, Theme } from '../types';
import { THEME_CONFIGS, CUSTOM_THEME_CONFIG } from '../constants';
import SpinnerIcon from './icons/SpinnerIcon';
import MarkdownRenderer from './MarkdownRenderer';

interface MessageProps {
  message: ChatMessage;
  theme: Theme;
}

const Message: React.FC<MessageProps> = ({ message, theme }) => {
  const isUser = message.role === 'user';
  const themeConfig = theme === Theme.Custom
    ? CUSTOM_THEME_CONFIG
    : THEME_CONFIGS[theme as Exclude<Theme, Theme.Custom>];

  const renderContent = () => {
    switch (message.type) {
      case 'loading':
        return (
          <div className="flex items-center space-x-2">
            <SpinnerIcon className="w-5 h-5" />
            <span>{message.content || 'Thinking...'}</span>
          </div>
        );
      case 'image':
        return (
          <img
            src={message.content}
            alt="Generated by AI"
            className="rounded-lg max-w-sm"
          />
        );
      case 'error':
        return <p className="text-red-400">{message.content}</p>;
      case 'text':
      default:
        if (isUser) {
          return <p className="whitespace-pre-wrap">{message.content}</p>;
        }
        return <MarkdownRenderer content={message.content} theme={theme} />;
    }
  };

  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'}`}>
      <div
        className={`max-w-xl lg:max-w-2xl px-4 py-3 rounded-2xl ${
          isUser
            ? `${themeConfig.userBubble} ${themeConfig.userText}`
            : `${themeConfig.assistantBubble} ${themeConfig.assistantText}`
        }`}
      >
        {renderContent()}
      </div>
    </div>
  );
};

export default Message;